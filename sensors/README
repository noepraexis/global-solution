### 1. **Definir os sensores adequados**

- **Tarefa**: Escolher os sensores certos para medir vari√°veis ambientais relevantes ao tipo de desastre (ex: temperatura, umidade, g√°s, press√£o, chuva, etc.).
- **Progresso**: Em andamento. Sensor DHT22 ser√° usado para temperatura e umidade.
- **Exemplos**:
  - `DHT22` ‚Äì Temperatura e umidade (bom para detectar risco de deslizamentos ou inc√™ndios).
  - `BMP180` ou `BME280` ‚Äì Press√£o atmosf√©rica (√∫til para prever tempestades).
  - `MQ-2`, `MQ-135` ‚Äì Gases inflam√°veis e qualidade do ar (√∫til para inc√™ndios).
  - Simuladores do Wokwi.

### 2. **Montar o circuito de sensores (virtual)**

- **Tarefa**: Configurar os sensores corretamente na simula√ß√£o (Wokwi).
- **Progresso**: Em andamento. Criada vers√£o inicial (com apenas um sensor e um led).
- **Melhor pr√°tica**:
  - No **Wokwi**, usar os blocos de sensores conectando aos **pinos GPIO compat√≠veis**.
  - Evitar usar GPIOs reservados da ESP32 (ex: GPIOs 6-11 usados pelo flash).
  - Documentar o **mapeamento dos pinos** (ex: DHT22 ‚Üí GPIO 4).

### 3. **Escrever o c√≥digo de leitura dos sensores**

- **Tarefa**: Programar em C++ (com framework Arduino) para capturar dados dos sensores e enviar via serial (ou outro protocolo).
- **Progresso**: Iniciada. Estrutura do c√≥digo sendo definida.
- **Melhor pr√°tica**:
  - Organizar o c√≥digo em fun√ß√µes limpas: `lerTemperatura()`, `lerUmidade()`, etc.
  - Use bibliotecas est√°veis: `DHT.h`, `Adafruit_Sensor`, etc.
  - Incluir tratamento de erros (ex: `isnan(temp)`).
  - Exemplo b√°sico:
    ```cpp
    #include <DHT.h>
    #define DHTPIN 4
    #define DHTTYPE DHT22
    DHT dht(DHTPIN, DHTTYPE);

    void setup() {
      Serial.begin(115200);
      dht.begin();
    }

    void loop() {
      float temp = dht.readTemperature();
      float hum = dht.readHumidity();
      if (!isnan(temp) && !isnan(hum)) {
        Serial.print("T:");
        Serial.print(temp);
        Serial.print(" H:");
        Serial.println(hum);
      }
      delay(2000);
    }

    ```

### 4. **Transmitir os dados para o sistema principal**

- **Tarefa**: Enviar os dados lidos dos sensores para o backend que ir√° armazenar/analisar (via serial, MQTT, HTTP, etc.).
- **Progresso**: N√£o iniciada.
- **Melhor pr√°tica**:
  - Formatar os dados em **JSON** ou CSV para facilitar leitura no Python.
  - Exemplo JSON:
    ```json
    { "temp": 32.5, "hum": 45.0 }
    ```

---

## üîß Ferramentas utilizadas

- **Wokwi**: Para simular sensores, circuitos e c√≥digos Arduino com ESP32.
- **PlatformIO**: Para programar ESP32 (em C++).
- **Serial Monitor / Python Script**: Para capturar os dados e redirecionar ao banco.
- **Diagrama de pinos (ESP32)**: Para evitar conflitos ao atribuir sensores.

---

## Diagrama de Pinos

| Componente   | Pino ESP32 | Fun√ß√£o                  |
| ------------ | ---------- | ----------------------- |
| DTH22 (Data) | GPIO23     | Ler umidade/temperatura |
| LED          | GPIO21     | Alertar Perigo          |

---

### Como Simular Varia√ß√µes Ambientais

- No ambiente Wokwi, useos **sliders ou inputs num√©ricos** para alterar vari√°veis como umidade ou temperatura.
- Testae cen√°rios cr√≠ticos. Exemplo: alta temperatura + baixa umidade ‚Üí risco de inc√™ndio.
